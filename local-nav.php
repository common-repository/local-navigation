<?php
/*
Plugin Name: Local Nav
Plugin URI: https://github.com/blbraner/localnav
Description: A simple plugin that will allow you to add a local navigation to any widgetized are on your site.
Author: Brandon Braner
Version: 1.2
Author URI: https://github.com/blbraner/localnav
License: GPLv2 or later
 */
// Block direct requests
if (!defined('ABSPATH')) {
    die('-1');
}

include 'local-nav-meta-box.php';
include 'local_nav_walker.php';

class local_nav extends WP_Widget {
    private $topLevelId = '';
    private $depth = 1;

	function __construct() {
		parent::__construct(
			'loca_nav', // Base ID
			__('Local_Nav', 'localnav'), // Name
			array('description' => __('Local Nav', 'localnav')) // Args
		);

        $nav_meta_box = new local_nav_add_metabox();
        $this->walker = new local_nav_walker();
	}
/**
 * Front-end display of widget.
 *
 * @see WP_Widget::widget()
 *
 * @param array $args Widget arguments.
 * @param array $instance Saved values from database.
 */
	public function widget($args, $instance) {
		echo $this->nav_construct($instance);
	}
/**
 * Back-end widget form.
 *
 * @see WP_Widget::form()
 *
 * @param array $instance Previously saved values from database.
 */
	public function form($instance) {
		if (isset($instance['title'])) {
			$title = $instance['title'];
		} else {
			$title = __('Local Nav', 'localnav');
		}
        if (isset($instance['depth'])) {
            $this->depth = $instance['depth'];
        } else {
            $this->depth = __(0, 'localnav');
        }

        if (isset($instance['class_name']) && !empty($instance['class_name'])) {
            $this->class_name = $instance['class_name'];
        } else {
            $this->class_name = __('local_nav', 'localnav');
        }
        $depth_help_text = <<<BOH
        (integer) This parameter controls how many levels in the hierarchy of pages are to be included in the list generated by wp_list_pages. The default value is 0 (display all pages, including all sub-pages).
           <li>0 (default) Displays pages at any depth and arranges them hierarchically in nested lists</li>
           <li> -1 Displays pages at any depth and arranges them in a single, flat list</li>
           <li> 1 Displays top-level Pages only</li>
           <li> 2, 3 â€¦ Displays Pages to the given depth</li>


BOH;



        ?>

<p>
<label for="<?php echo $this->get_field_id('title');?>"><?php _e('Title:');?></label>
<input class="widefat" id="<?php echo $this->get_field_id('title');?>" name="<?php echo $this->get_field_name('title');?>" type="text" value="<?php echo esc_attr($title);?>">
    <label for="<?php echo $this->get_field_id('depth');?>"><?php _e('Depth:');?></label>
    <input class="widefat" id="<?php echo $this->get_field_id('depth');?>" name="<?php echo $this->get_field_name('depth');?>" type="text" value="<?php echo esc_attr($this->depth);?>">
    <label for="<?php echo $this->get_field_id('class_name');?>"><?php _e('Class Name:');?></label>
    <input class="widefat" id="<?php echo $this->get_field_id('class_name');?>" name="<?php echo $this->get_field_name('class_name');?>" type="text" value="<?php echo esc_attr($this->class_name);?>">
</p>
<?php
}

	private function nav_construct($instance) {
		
		if(is_front_page()  || !is_page()){
			exit;
		}

		$nav = '<nav class="'.$instance['class_name'].'">';

		$nav .= $this->left_nav_header();
		$nav .= $this->left_nav_children($instance);

		$nav .= "</nav>";

		return $nav;
	}

    private function left_nav_header() {

        if (is_page()) {

            global $post;

            if ($post->post_parent) {
                //if post has parent get the top level parent as the top menu item
                $parents = get_post_ancestors($post->ID);
                $parents = array_reverse($parents); //reverese array so top level is always on top
                $topLevelParentId = $parents[0];
                $this->topLevelId = $topLevelParentId;
                $link = get_permalink($topLevelParentId);
                $topLevelParent = get_post($topLevelParentId);

                $topLevelParentTitle = $topLevelParent->post_title;

                $menuHeader = <<<BOL

BOL;

            } else {
                //this means you are on the top level so no need to climb the hiearcy to get parent id
                $post_info = get_post();
                $this->topLevelId = $post_info->ID;
                $topLevelParentTitle = $post_info->post_title;
                $link = get_permalink();
                $menuHeader = <<<BOL

BOL;

            }

            return $menuHeader;

        }
    }

    private function left_nav_children($instance) {
         $depth = $instance['depth'];


        $children = '<ul>';
        //$children .= wp_list_pages("title_li=&child_of=" . $this->topLevelId . "&echo=0&depth={$depth}");
        $children .= wp_list_pages([
            'title_li' => '',
            'child_of' => $this->topLevelId,
            'echo'     => false,
            'depth'    => $depth,
            'walker'   => $this->walker
        ]);
        $children .='</ul>';
        return $children;
    }

    /**
     * Sanitize widget form values as they are saved.
     *
     * @see WP_Widget::update()
     *
     * @param array $new_instance Values just sent to be saved.
     * @param array $old_instance Previously saved values from database.
     *
     * @return array Updated safe values to be saved.
     */
    public function update($new_instance, $old_instance) {
        $instance = array();
        $instance['title'] = (!empty($new_instance['title'])) ? strip_tags($new_instance['title']) : '';
        $instance['depth'] = ($new_instance['depth'] > -1) ? $new_instance['depth'] : 1;
        $instance['class_name'] = (!empty($new_instance['class_name'])) ? strip_tags($new_instance['class_name']) : '';
        return $instance;
    }
}

function local_nav_register() {
    register_widget( 'local_nav' );
}

add_action( 'widgets_init', 'local_nav_register' );